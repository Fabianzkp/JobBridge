@page "/employer/{employerId:int}/jobs/edit/{jobId:int}"
@using JobBridge.Components.Common
@using JobBridge.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject JobBridgeContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Edit Job - JobBridge</PageTitle>

<div class="job-edit-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="header-content">
            <h1 class="page-title">Edit Job Posting</h1>
            <p class="page-subtitle">Update your job posting to attract the right candidates</p>
        </div>

        <div class="header-actions">
            <a href="/employer/@EmployerId/jobs" class="btn btn-secondary">
                ‚Üê Back to Jobs
            </a>
            <a href="/jobs/@JobId" class="btn btn-outline" target="_blank">
                View Live Job
            </a>
        </div>
    </div>

    <!-- Edit Form -->
    <div class="form-container">
        <EditForm Model="jobPost" class="job-form" OnValidSubmit="HandleSubmit" @onsubmit:preventDefault="true">

            <!-- Job Basics Section -->
            <div class="form-section">
                <div class="section-header">
                    <h2 class="section-title">Job Basics</h2>
                    <p class="section-description">Update the essential information about this position</p>
                </div>

                <div class="form-grid">
                    <div class="form-group span-2">
                        <label for="jobTitle" class="form-label required">Job Title</label>
                        <input id="jobTitle" type="text" class="form-control" 
                               @bind="jobPost.JobTitle" aria-required="true" aria-describedby="jobTitleHint" /> 
                        <ValidationMessage For="@(() => jobPost.JobTitle)" id="jobTitleValidation" class="text-danger" style="display:block;" />
                        <div id="jobTitleHint" class="form-hint">Be specific and clear about the role</div>
                    </div>

                    <div class="form-group">
                        <label for="department" class="form-label required">Department</label>
                        <select id="department" class="form-control" @bind="jobPost.Department" aria-required="true">
                            <option value="Engineering">Engineering</option>
                            <option value="Product">Product</option>
                            <option value="Design">Design</option>
                            <option value="Marketing">Marketing</option>
                            <option value="Sales">Sales</option>
                            <option value="Human Resources">Human Resources</option>
                        </select>
                        <ValidationMessage For="@(() => jobPost.Department)" id="departmentValidation" class="text-danger" style="display:block;" />
                    </div>

                    <div class="form-group">
                        <label for="employmentType" class="form-label required">Employment Type</label>
                        <select id="employmentType" class="form-control" @bind="jobPost.EmploymentType" aria-required="true">
                            <option value="Full-Time">Full-Time</option>
                            <option value="Part-Time">Part-Time</option>
                            <option value="Contract">Contract</option>
                            <option value="Internship">Internship</option>
                            <option value="Freelance">Freelance</option>
                        </select>
                        <ValidationMessage For="@(() => jobPost.EmploymentType)" id="employmentTypeValidation" class="text-danger" style="display:block;" />
                    </div>

                    <div class="form-group">
                        <label for="experienceLevel" class="form-label required">Experience Level</label>
                        <select id="experienceLevel" class="form-control" @bind="jobPost.ExperienceLevel" aria-required="true">
                            <option value="Entry Level">Entry Level</option>
                            <option value="Mid Level">Mid Level</option>
                            <option value="Senior Level">Senior Level</option>
                            <option value="Lead/Principal">Lead/Principal</option>
                            <option value="Executive">Executive</option>
                        </select>
                        <ValidationMessage For="@(() => jobPost.ExperienceLevel)" id="experienceLevelValidation" class="text-danger" style="display:block;" /> 
                    </div>

                    <div class="form-group">
                        <label for="workArrangement" class="form-label required">Work Arrangement</label>
                        <select id="workArrangement" class="form-control" @bind="jobPost.WorkArrangement" aria-required="true">
                            <option value="">Select Work Arrangement</option>
                            <option value="On-site">On-site</option>
                            <option value="Remote">Remote</option>
                            <option value="Hybrid">Hybrid</option>
                        </select>
                        <ValidationMessage For="@(() => jobPost.WorkArrangement)" id="workArrangementValidation" class="text-danger" style="display:block;" />
                    </div>
                </div>
            </div>

            <!-- Location & Compensation Section -->
            <div class="form-section">
                <div class="section-header">
                    <h2 class="section-title">Location & Compensation</h2>
                    <p class="section-description">Update location and compensation details</p>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label for="location" class="form-label required">Location</label>
                        <input id="location" type="text" class="form-control" @bind="jobPost.Location" @oninput="OnLocationChanged" aria-required="true" />
                        <ValidationMessage For="@(() => jobPost.Location)" id="locationValidation" class="text-danger" style="display:block;" />
                    </div>

                    <div class="form-group">
                        <label for="timezone" class="form-label">Timezone</label>
                        <select id="timezone" class="form-control" @bind="jobPost.Timezone" aria-describedby="timezoneHint">
                            <option value="PST (Pacific)">PST (Pacific)</option>
                            <option value="MST (Mountain)">MST (Mountain)</option>
                            <option value="CST (Central)">CST (Central)</option>
                            <option value="EST (Eastern)">EST (Eastern)</option>
                        </select>
                        <div id="timezoneHint" class="form-hint" style="display:none;">Timezone help text</div>
                    </div>

                    <div class="form-group">
                        <label for="minSalary" class="form-label">Minimum Salary</label>
                        <div class="input-group">
                            <span class="input-prefix" id="currencySymbolMin">@currencySymbol</span>
                            <input id="minSalary" type="text" class="form-control" @bind="minSalaryFormatted" @oninput="OnMinSalaryChanged" aria-describedby="currencySymbolMin" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="maxSalary" class="form-label">Maximum Salary</label>
                        <div class="input-group">
                            <span class="input-prefix" id="currencySymbolMax">@currencySymbol</span>
                            <input id="maxSalary" type="text" class="form-control" @bind="maxSalaryFormatted" @oninput="OnMaxSalaryChanged" aria-describedby="currencySymbolMax" />
                        </div>
                    </div>

                    <div class="form-group span-2">
                        <label for="additionalCompensation" class="form-label">Additional Compensation</label>
                        <input id="additionalCompensation" type="text" class="form-control" @bind="jobPost.AdditionalCompensation" aria-describedby="additionalCompensationHint" />
                        <div id="additionalCompensationHint" class="form-hint">Mention equity, bonuses, or other benefits</div>
                    </div>
                </div>
            </div>

            <!-- Job Description Section -->
            <div class="form-section">
                <div class="section-header">
                    <h2 class="section-title">Job Description</h2>
                    <p class="section-description">Update the role description and requirements</p>
                </div>

                <div class="form-group">
                    <label for="jobSummary" class="form-label required">Job Summary</label>
                    <textarea id="jobSummary" class="form-control textarea-large" rows="4" @bind="jobPost.JobSummary" aria-required="true" aria-describedby="jobSummaryHint"></textarea>
                    <ValidationMessage For="@(() => jobPost.JobSummary)" id="jobSummaryValidation" class="text-danger" style="display:block;" />
                    <div id="jobSummaryHint" class="form-hint">Keep it engaging and highlight key aspects of the role</div>
                </div>

                <div class="form-group">
                    <label for="keyResponsibilities" class="form-label required">Key Responsibilities</label>
                    <textarea id="keyResponsibilities" class="form-control textarea-large" rows="6" @bind="jobPost.KeyResponsibilities" aria-required="true"></textarea>
                    <ValidationMessage For="@(() => jobPost.KeyResponsibilities)" id="keyResponsibilitiesValidation" class="text-danger" style="display:block;" />
                </div>

                <div class="form-group">
                    <label for="requiredQualifications" class="form-label required">Required Qualifications</label>
                    <textarea id="requiredQualifications" class="form-control textarea-large" rows="6" @bind="jobPost.RequiredQualifications" aria-required="true"></textarea>
                    <ValidationMessage For="@(() => jobPost.RequiredQualifications)" id="requiredQualificationsValidation" class="text-danger" style="display:block;" />
                </div>

                <div class="form-group">
                    <label for="preferredQualifications" class="form-label">Preferred Qualifications</label>
                    <textarea id="preferredQualifications" class="form-control textarea-large" rows="4" @bind="jobPost.PreferredQualifications" aria-describedby="preferredQualificationsHint"></textarea>
                    <div id="preferredQualificationsHint" class="form-hint" style="display:none;">Preferred qualifications help text</div>
                </div>
            </div>

            <!-- Skills & Requirements Section -->
            <div class="form-section">
                <div class="section-header">
                    <h2 class="section-title">Skills & Requirements</h2>
                    <p class="section-description">Add specific skills and technologies required for this role</p>
                </div>

                <div class="form-group">
                    <label for="requiredSkills" class="form-label">Required Skills</label>
                    <textarea id="requiredSkills" class="form-control textarea-large" rows="4" placeholder="Javascript, React, Node.js" @bind="jobPost.RequiredSkills" aria-describedby="requiredSkillsHint"></textarea>
                    <div id="requiredSkillsHint" class="form-hint" style="display:none;">Required skills help text</div>
                </div>

                <div class="form-group">
                    <label for="niceToHaveSkills" class="form-label">Nice-to-Have Skills</label>
                    <textarea id="niceToHaveSkills" class="form-control textarea-large" rows="4" placeholder="Python, AWS, etc." @bind="jobPost.NiceToHaveSkills" aria-describedby="niceToHaveSkillsHint"></textarea>
                    <div id="niceToHaveSkillsHint" class="form-hint" style="display:none;">Nice to have skills help text</div> 
                </div>
            </div>

            <!-- Application Settings Section -->
            <div class="form-section">
                <div class="section-header">
                    <h2 class="section-title">Application Settings</h2>
                    <p class="section-description">Update application settings and deadlines</p>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label for="applicationMethod" class="form-label required">Application Method</label>
                        <select id="applicationMethod" class="form-control" @bind="jobPost.ApplicationMethod" aria-required="true">
                            <option value="">Select Application Method</option>
                            <option value="JobBridge Application System">JobBridge Application System</option>
                            <option value="External Link/Email">External Link/Email</option>
                        </select>
                        <ValidationMessage For="@(() => jobPost.ApplicationMethod)" id="applicationMethodValidation" class="text-danger" style="display:block;" />
                    </div>

                    <div class="form-group">
                        <label for="externalApplicationUrl" class="form-label">External Application URL</label>
                        <InputText id="externalApplicationUrl" type="url" class="form-control" placeholder="https://company.com/careers/apply" @bind-Value="jobPost.ExternalApplicationUrl" aria-describedby="externalApplicationUrlHint" />
                        <ValidationMessage For="@(() => jobPost.ExternalApplicationUrl)" class="text-danger" style="display:block;" />
                        <div id="externalApplicationUrlHint" class="form-hint">Only required if using external application method</div>
                    </div>

                    <div class="form-group">
                        <label for="applicationDeadline" class="form-label required">Application Deadline</label>
                        <input id="applicationDeadline" type="date" class="form-control" @bind="jobPost.ApplicationDeadline" @bind:format="yyyy-MM-dd" aria-required="true" />
                    </div>

                    <div class="form-group">
                        <label for="postDuration" class="form-label">Job Posting Duration</label>
                        <select id="postDuration" class="form-control" @bind="postDuration" aria-describedby="postDurationHint">
                            <option value="30">30 days</option>
                            <option value="60">60 days</option>
                            <option value="90">90 days</option>
                            <option value="180">180 days</option>
                        </select>
                        <div id="postDurationHint" class="form-hint" style="display:none;">Duration help text</div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="checkbox-group">
                        <input id="isFeatured" type="checkbox" @bind="jobPost.IsFeatured" />
                        <label for="isFeatured" class="checkbox-label">This is a featured job posting</label>
                        <span class="checkbox-hint">Featured jobs get higher visibility</span>

                        <input id="isUrgent" type="checkbox" @bind="jobPost.IsUrgent" />
                        <label for="isUrgent" class="checkbox-label">This is an urgent hiring need</label>
                        <span class="checkbox-hint">Shows an "urgent" badge to attract faster applications</span>
                    </div>
                </div>
            </div>

            <!-- Error Message -->
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <!-- Form Actions -->
            <div class="form-actions">
                <div class="actions-left"></div>
                <div class="actions-right" aria-live="polite">
                    <button type="submit" class="btn btn-primary">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span>Update Job</span>
                        }
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int EmployerId { get; set; }
    [Parameter] public int JobId { get; set; }
    private JobPost jobPost = new();
    private bool isSubmitting = false;
    private string? errorMessage = null;
    private int postDuration;
    private string currencySymbol = "$"; // Default to USD
    private string minSalaryFormatted = "";
    private string maxSalaryFormatted = "";
    protected override async Task OnInitializedAsync()
    {
        // Load job data for editing when data layer is ready
        var foundJob = await DbContext.JobPosts
        .Include(j => j.Employer)
        .Include(j => j.Field)
        .FirstOrDefaultAsync(j => j.Id == JobId && j.EmployerId == EmployerId);

        if (foundJob != null)
        {
            jobPost = foundJob;

            // Calculate post duration in days
            var duration = jobPost.PostExpirationDate - jobPost.CreatedAt;
            postDuration = (int)Math.Round(duration.TotalDays); // Store the duration in days
            Console.WriteLine($"Post Duration: {postDuration} days");
            
            // Set initial currency symbol based on existing location
            SetCurrencySymbolFromLocation(jobPost.Location ?? "");
            
            // Initialize formatted salary values
            minSalaryFormatted = jobPost.MinimumSalary > 0 ? jobPost.MinimumSalary.ToString("N0") : "";
            maxSalaryFormatted = jobPost.MaximumSalary > 0 ? jobPost.MaximumSalary.ToString("N0") : "";
        }
        else
        {
            jobPost = new JobPost();
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            // Update timestamps
            jobPost.UpdatedAt = DateTime.UtcNow;
            jobPost.PostExpirationDate = jobPost.CreatedAt.AddDays(postDuration);


            // Update existing job post
            DbContext.JobPosts.Update(jobPost);
            await DbContext.SaveChangesAsync();

            // Navigate back to the job details page
            NavigationManager.NavigateTo($"/employer/{EmployerId}/jobs");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while updating the job post: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private void OnLocationChanged(ChangeEventArgs e)
    {
        var location = e.Value?.ToString() ?? "";
        SetCurrencySymbolFromLocation(location);
        StateHasChanged();
    }
    
    private void SetCurrencySymbolFromLocation(string location)
    {
        var locationLower = location.ToLower();
        
        if (locationLower.Contains("uk") || locationLower.Contains("united kingdom") || locationLower.Contains("london") || locationLower.Contains("england") || locationLower.Contains("scotland") || locationLower.Contains("wales"))
        {
            currencySymbol = "¬£";
        }
        else if (locationLower.Contains("canada") || locationLower.Contains("toronto") || locationLower.Contains("vancouver") || locationLower.Contains("montreal"))
        {
            currencySymbol = "C$";
        }
        else if (locationLower.Contains("australia") || locationLower.Contains("sydney") || locationLower.Contains("melbourne") || locationLower.Contains("brisbane"))
        {
            currencySymbol = "A$";
        }
        else if (locationLower.Contains("euro") || locationLower.Contains("germany") || locationLower.Contains("france") || locationLower.Contains("spain") || locationLower.Contains("italy") || locationLower.Contains("netherlands") || locationLower.Contains("belgium"))
        {
            currencySymbol = "‚Ç¨";
        }
        else if (locationLower.Contains("japan") || locationLower.Contains("tokyo") || locationLower.Contains("osaka"))
        {
            currencySymbol = "¬•";
        }
        else if (locationLower.Contains("india") || locationLower.Contains("mumbai") || locationLower.Contains("delhi") || locationLower.Contains("bangalore"))
        {
            currencySymbol = "‚Çπ";
        }
        else if (locationLower.Contains("nigeria") || locationLower.Contains("lagos") || locationLower.Contains("abuja") || locationLower.Contains("kano") || locationLower.Contains("ibadan") || locationLower.Contains("calabar"))
        {
            currencySymbol = "‚Ç¶";
        }
        else
        {
            currencySymbol = "$"; // Default to USD for US and other locations
        }
    }
    
    private void OnMinSalaryChanged(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Replace(",", "") ?? "";
        if (decimal.TryParse(input, out var value))
        {
            jobPost.MinimumSalary = value;
            minSalaryFormatted = value.ToString("N0");
        }
        else
        {
            minSalaryFormatted = input;
        }
    }

    private void OnMaxSalaryChanged(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Replace(",", "") ?? "";
        if (decimal.TryParse(input, out var value))
        {
            jobPost.MaximumSalary = value;
            maxSalaryFormatted = value.ToString("N0");
        }
        else
        {
            maxSalaryFormatted = input;
        }
    }
}
