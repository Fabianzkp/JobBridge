@page "/authentication"
@page "/authentication/login"
@page "/authentication/register"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using JobBridge.Identity
@using System.ComponentModel.DataAnnotations
@using JobBridge.Data
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.JSInterop

<link href="css/authentication.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container mt-5 animate-fadeInUp auth-container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            @if (showLoginForm)
            {
                <h2 class="text-center mb-4 gradient-text" style="background: linear-gradient(90deg, #0ea5e9, #d946ef); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; transition: all 0.15s ease; cursor: pointer;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">Login to JobBridge</h2>

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="card p-4 shadow-sm auth-card">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="validation-message" />

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email"
                            placeholder="Enter your email" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <div class="position-relative">
                            <InputText id="password" type="@(showLoginPassword ? "text" : "password")" class="form-control pe-5" @bind-Value="loginModel.Password"
                                placeholder="Enter your password" />
                            <button class="btn position-absolute top-50 end-0 translate-middle-y border-0 bg-transparent" type="button" @onclick="() => showLoginPassword = !showLoginPassword" style="z-index: 10; margin-right: 10px;">
                                <i class="bi @(showLoginPassword ? "bi-eye-slash" : "bi-eye") text-muted"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>

                    <button type="submit" class="btn btn-primary w-100 animate-pulse" disabled="@isLoggingIn">
                        @if (isLoggingIn)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Logging in...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>

                    @if (loginSuccessful)
                    {
                        <div class="alert alert-success mt-3" role="alert">
                            Login successful! Redirecting to home page in 2 seconds...
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage) && errorMessage.Contains("Registration successful"))
                    {
                        <div class="alert alert-success mt-3" role="alert">
                            @errorMessage
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="text-center mt-3">
                        <a href="javascript:void(0);" @onclick="() => showLoginForm = false" class="text-muted">Don't have
                            an account? Register here</a>
                    </div>
                </EditForm>
            }
            else
            {
                <h2 class="text-center mb-4 gradient-text" style="background: linear-gradient(90deg, #0ea5e9, #d946ef); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; transition: all 0.15s ease; cursor: pointer;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">Register for JobBridge</h2>
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="register-form"
                    Context="formContext" class="card p-4 shadow-sm auth-card">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="validation-message" />

                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName"
                            placeholder="Enter your first name" />
                        <ValidationMessage For="@(() => registerModel.FirstName)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName"
                            placeholder="Enter your last name" />
                        <ValidationMessage For="@(() => registerModel.LastName)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="registerModel.Email"
                            placeholder="Enter your email" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <div class="position-relative">
                            <InputText id="password" type="@(showRegisterPassword ? "text" : "password")" class="form-control pe-5" @bind-Value="registerModel.Password"
                                placeholder="Enter your password" />
                            <button class="btn position-absolute top-50 end-0 translate-middle-y border-0 bg-transparent" type="button" @onclick="() => showRegisterPassword = !showRegisterPassword" style="z-index: 10; margin-right: 10px;">
                                <i class="bi @(showRegisterPassword ? "bi-eye-slash" : "bi-eye") text-muted"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => registerModel.Password)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <div class="position-relative">
                            <InputText id="confirmPassword" type="@(showConfirmPassword ? "text" : "password")" class="form-control pe-5"
                                @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm your password" />
                            <button class="btn position-absolute top-50 end-0 translate-middle-y border-0 bg-transparent" type="button" @onclick="() => showConfirmPassword = !showConfirmPassword" style="z-index: 10; margin-right: 10px;">
                                <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye") text-muted"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone</label>
                        <InputText id="phone" class="form-control" @bind-Value="registerModel.Phone"
                            placeholder="Enter your phone number" />
                        <ValidationMessage For="@(() => registerModel.Phone)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <InputSelect id="role" class="form-control" @bind-Value="registerModel.Role">
                            <option value="">Select a role</option>
                            <option value="JobSeeker">Job Seeker</option>
                            <option value="Employer">Employer</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => registerModel.Role)" class="validation-message" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100 animate-pulse" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Registering...</span>
                        }
                        else
                        {
                            <span>Register</span>
                        }
                    </button>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="text-center mt-3">
                        <a href="javascript:void(0);" @onclick="() => showLoginForm = true" class="text-muted">Already have
                            an account? Login here</a>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private bool showLoginForm = true;
    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();
    private bool isSubmitting = false;
    private bool isLoggingIn = false;
    private string? errorMessage;
    private bool loginSuccessful = false;
    private bool showLoginPassword = false;
    private bool showRegisterPassword = false;
    private bool showConfirmPassword = false;


    [Parameter]
    [SupplyParameterFromQuery(Name = "error")]
    public string? ErrorMessageFromQuery { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(ErrorMessageFromQuery))
        {
            errorMessage = ErrorMessageFromQuery;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long.", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password is required")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone number is required")]
        public string Phone { get; set; } = string.Empty;

        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        errorMessage = null;

        try
        {
            var user = await AuthService.FindUserByEmailAsync(loginModel.Email);
            if (user != null)
            {
                var result = await AuthService.CheckPasswordSignInAsync(user, loginModel.Password, false);
                if (result.Succeeded)
                {
                    loginSuccessful = true;
                    await InvokeAsync(StateHasChanged);
                    
                    // Redirect to server login page
                    await Task.Delay(2000);
                    Navigation.NavigateTo($"/server-login?email={user.Email}&remember={loginModel.RememberMe}");
                    return;
                }
            }
            errorMessage = "Invalid login attempt. Please check your email and password.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoggingIn = false;
        }
    }

    private async Task HandleRegister()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            var user = new User
            {
                Role = registerModel.Role,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Email = registerModel.Email,
                UserName = registerModel.Email,
                Phone = registerModel.Phone,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            var result = await AuthService.RegisterUserAsync(user, registerModel.Password);
            if (result.Succeeded)
            {
                showLoginForm = true;
                errorMessage = "Registration successful! Please log in with your credentials.";
                registerModel = new RegisterModel();
                await InvokeAsync(StateHasChanged);
                return;
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}