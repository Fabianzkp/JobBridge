@page "/jobs"
@page "/job-listings"
@using JobBridge.Components.Common
@using JobBridge.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@inject JobBridgeContext DbContext
@inject NavigationManager Navigation

<PageTitle>Browse Jobs - JobBridge</PageTitle>


<div class="job-listings-container">
    <!-- Header Section -->
    <div class="listings-header">
        <div class="header-content">
            <h1 class="page-title">Find Your Dream Job</h1>
            <p class="page-subtitle">Discover opportunities that match your skills and career goals</p>
        </div>

        <!-- Search Section -->
        <div class="search-section">
            <SearchBar Placeholder="Search for jobs, companies, or keywords..." 
                OnSearch="HandleSearch"
                OnAdvancedToggle="ToggleFilters" />
        </div>

        <!-- Job Stats -->
        <div class="job-stats">
            <div class="stat-card">
                <div class="stat-number">@jobs.Count(j => j.IsActive)</div>
                <div class="stat-label">Available Jobs</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@jobs.Count(j => j.PostedDate.Date == DateTime.Today)</div>
                <div class="stat-label">New Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@jobs.Count(j => j.IsUrgent)</div>
                <div class="stat-label">Urgent</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@jobs.Count(j => j.IsFeatured)</div>
                <div class="stat-label">Featured</div>
            </div>
        </div>
    </div>

    <!-- Main Content - Single Column -->
    <div class="listings-content-single">
        <!-- Job Results Full Width -->
        <div class="job-results-full">
            <!-- Results Header -->
            <div class="results-header">
                <div class="results-info" aria-live="polite" aria-atomic="true">
                    <h2 class="results-title">@filteredJobs.Count Jobs Found</h2>
                </div>

                <div class="results-controls">
                    <div class="sort-dropdown">
                        <label for="sort-select" class="visually-hidden">Sort results by</label>
                        
                        <select id="sort-select" class="sort-select" @onchange="SortJobs">
                            <option value="relevance">Most Relevant</option>
                            <option value="date">Date Posted</option>
                            <option value="salary_high">Salary: High to Low</option>
                            <option value="salary_low">Salary: Low to High</option>
                            <option value="company">Company A-Z</option>
                        </select>
                    </div>

                    <div class="view-toggle">
                        <button aria-pressed="true" class="view-btn @(viewMode == "grid" ? "active" : "")" @onclick="() => SetViewMode(ViewMode.Grid)">Grid</button>
                        <button aria-pressed="false"class="view-btn @(viewMode == "list" ? "active" : "")" @onclick="() => SetViewMode(ViewMode.List)">List</button>
                    </div>
                </div>
            </div>

            <!-- Job Cards Grid -->
            <div class="job-cards-container @viewMode">
                @if (isLoading)
                {
                    <div class="loading-message">
                        <div class="loading-spinner"></div>
                        <p>Loading job listings...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <p>@errorMessage</p>
                    </div>
                }
                else if (!filteredJobs.Any())
                {
                    <div class="no-jobs-message">
                        <div class="no-results-icon">üîç</div>
                        <h3>No jobs found</h3>
                        @if (currentSearch != null && !string.IsNullOrWhiteSpace(currentSearch.SearchTerm))
                        {
                            <p>We couldn't find any jobs matching "<strong>@currentSearch.SearchTerm</strong>"</p>
                        }
                        else
                        {
                            <p>No job listings found matching your criteria.</p>
                        }
                        <p class="suggestion-text">Try adjusting your search terms or filters</p>
                        <button class="btn btn-primary" @onclick="ClearFilters">Clear All Filters</button>
                    </div>
                }
                else
                {
                    var pagedJobs = filteredJobs
                        .Skip((currentPage - 1) * pageSize)
                        .Take(pageSize)
                        .ToList();
                        
                    @foreach (var job in pagedJobs)
                    {
                        <Jobcard JobPost="@job" OnBookmarkToggle="HandleBookmarkToggle" />
                    }
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="pagination-container">
                    <div class="pagination-info">
                        Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, filteredJobs.Count) of @filteredJobs.Count jobs
                    </div>
                    <div class="pagination">
                        <button class="page-btn @(currentPage == 1 ? "disabled" : "")" 
                            @onclick="() => GoToPage(currentPage - 1)" 
                            disabled="@(currentPage == 1)"
                            aria-label="Previous Page">
                            Previous
                        </button>
                        
                        @for (int i = 1; i <= Math.Min(totalPages, 10); i++)
                        {
                            var pageNum = i;
                            <button class="page-btn @(currentPage == pageNum ? "active" : "")" 
                                @onclick="() => GoToPage(pageNum)">
                                @pageNum
                            </button>
                        }
                        
                        @if (totalPages > 10)
                        {
                            <span class="page-ellipsis">...</span>
                            <button class="page-btn" @onclick="() => GoToPage(totalPages)">
                                @totalPages
                            </button>
                        }
                        
                        <button class="page-btn @(currentPage == totalPages ? "disabled" : "")" 
                            @onclick="() => GoToPage(currentPage + 1)" 
                            disabled="@(currentPage == totalPages)">
                            Next
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Advanced Filter Panel -->
<FilterPanel IsVisible="@showAdvancedFilters" 
    AllJobs="@jobs"
    OnFiltersChanged="HandleFiltersChanged" 
    OnClose="CloseAdvancedFilters" />

@code {
    private bool showAdvancedFilters = false;
    private List<JobPost> jobs = new();
    private List<JobPost> filteredJobs = new();
    private bool isLoading = true;
    private string? errorMessage = null;
    private string viewMode = "grid";
    private string sortBy = "relevance";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages => (int)Math.Ceiling((double)filteredJobs.Count / pageSize);
    
    // Search and Filter Models
    private SearchBar.SearchModel? currentSearch;
    private FilterPanel.FilterModel? currentFilters;

    [Parameter]
    [SupplyParameterFromQuery(Name = "title")]
    public string? SearchTitle { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "location")]
    public string? SearchLocation { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string? SearchType { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "minSalary")]
    public decimal? SearchMinSalary { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "maxSalary")]
    public decimal? SearchMaxSalary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
        await ApplyUrlParameters();
    }

    private async Task ApplyUrlParameters()
    {
        if (!string.IsNullOrEmpty(SearchTitle) || !string.IsNullOrEmpty(SearchLocation) || 
            !string.IsNullOrEmpty(SearchType) || SearchMinSalary.HasValue || SearchMaxSalary.HasValue)
        {
            // Set up search model from URL parameters
            currentSearch = new SearchBar.SearchModel
            {
                SearchTerm = SearchTitle ?? "",
                Location = SearchLocation ?? ""
            };

            // Set up filter model from URL parameters
            currentFilters = new FilterPanel.FilterModel();
            
            if (!string.IsNullOrEmpty(SearchType))
            {
                currentFilters.EmploymentTypes = new List<string> { SearchType };
            }
            
            if (SearchMinSalary.HasValue)
            {
                currentFilters.MinSalary = (int?)SearchMinSalary;
            }
            
            if (SearchMaxSalary.HasValue)
            {
                currentFilters.MaxSalary = (int?)SearchMaxSalary;
            }

            await ApplyFilters();
        }
    }

    private async Task LoadJobs()
    {
        try
        {
            isLoading = true;
            jobs = await DbContext.JobPosts
                .Include(j => j.Employer)
                .Include(j => j.Field)
                .Where(j => j.IsActive)
                .OrderByDescending(j => j.PostedDate)
                .ToListAsync();
            
            filteredJobs = jobs.ToList();
            ApplySorting();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load job listings: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSearch(SearchBar.SearchModel searchModel)
    {
        currentSearch = searchModel;
        Console.WriteLine($"HandleSearch called with: '{searchModel.SearchTerm}', '{searchModel.Location}'");
        await ApplyFilters();
    }

    private async Task HandleFiltersChanged(FilterPanel.FilterModel filterModel)
    {
        currentFilters = filterModel;
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        try
        {
            isLoading = true;
            
            // Start with all jobs
            var query = jobs.AsQueryable();
            
            // DEBUG: Log the search term
            Console.WriteLine($"Searching for: '{currentSearch?.SearchTerm}' in {jobs.Count} jobs");

        // Apply search filters
        if (currentSearch != null)
        {
            if (!string.IsNullOrWhiteSpace(currentSearch.SearchTerm))
            {
            var searchTerm = currentSearch.SearchTerm.Trim().ToLower();
            Console.WriteLine($"Filtering with search term: '{searchTerm}'");
            
            var beforeCount = query.Count();
            query = query.Where(j =>
                (j.JobTitle != null && j.JobTitle.ToLower().Contains(searchTerm)) ||
                (j.Department != null && j.Department.ToLower().Contains(searchTerm)) ||
                (j.JobSummary != null && j.JobSummary.ToLower().Contains(searchTerm)) ||
                (j.Employer != null && j.Employer.Name != null && j.Employer.Name.ToLower().Contains(searchTerm)) ||
                (j.RequiredSkills != null && j.RequiredSkills.ToLower().Contains(searchTerm)) ||
                (j.NiceToHaveSkills != null && j.NiceToHaveSkills.ToLower().Contains(searchTerm)) ||
                (j.KeyResponsibilities != null && j.KeyResponsibilities.ToLower().Contains(searchTerm)));
            
            var afterCount = query.Count();
            Console.WriteLine($"Before filter: {beforeCount} jobs, After filter: {afterCount} jobs");
        }

            if (!string.IsNullOrWhiteSpace(currentSearch.Location))
                            {
                                var location = currentSearch.Location.Trim().ToLower();
                                query = query.Where(j => 
                                    (j.Location != null && j.Location.ToLower().Contains(location)) ||
                                    (j.WorkArrangement != null && j.WorkArrangement.ToLower().Contains(location)));
                            }
                }

            // Apply advanced filters
            if (currentFilters != null)
            {
                // Employment Type
                if (currentFilters.EmploymentTypes != null && currentFilters.EmploymentTypes.Any())
                {
                    // Normalize the employment types for comparison
                    var normalizedTypes = currentFilters.EmploymentTypes.Select(t => t.ToLower()).ToList();
                    query = query.Where(j => j.EmploymentType != null && 
                        normalizedTypes.Contains(j.EmploymentType.ToLower()));
                }

                // Experience Level
                if (currentFilters.ExperienceLevels != null && currentFilters.ExperienceLevels.Any())
                {
                    var normalizedLevels = currentFilters.ExperienceLevels.Select(l => l.ToLower()).ToList();
                    query = query.Where(j => j.ExperienceLevel != null && 
                        normalizedLevels.Contains(j.ExperienceLevel.ToLower()));
                }

                // Salary Range
                if (currentFilters.MinSalary.HasValue)
                {
                    query = query.Where(j => j.MaximumSalary >= currentFilters.MinSalary.Value);
                }
                if (currentFilters.MaxSalary.HasValue)
                {
                    query = query.Where(j => j.MinimumSalary <= currentFilters.MaxSalary.Value);
                }

                // Remote/Hybrid
                if (currentFilters.RemoteOnly)
                {
                    query = query.Where(j => j.WorkArrangement != null && 
                        j.WorkArrangement.ToLower() == "remote");
                }
                if (currentFilters.HybridIncluded)
                {
                    query = query.Where(j => j.WorkArrangement != null && 
                        (j.WorkArrangement.ToLower() == "hybrid" || j.WorkArrangement.ToLower() == "remote"));
                }

                // Date Posted
                if (!string.IsNullOrEmpty(currentFilters.DatePosted) && currentFilters.DatePosted != "any")
                {
                    var dateLimit = currentFilters.DatePosted switch
                    {
                        "1day" => DateTime.UtcNow.AddDays(-1),
                        "1week" => DateTime.UtcNow.AddDays(-7),
                        "1month" => DateTime.UtcNow.AddMonths(-1),
                        _ => DateTime.MinValue
                    };

                    if (dateLimit > DateTime.MinValue)
                    {
                        query = query.Where(j => j.PostedDate >= dateLimit);
                    }
                }
            }

        filteredJobs = query.ToList();
        // DEBUG: Log results
        Console.WriteLine($"Found {filteredJobs.Count} jobs after filtering");
        foreach(var job in filteredJobs)
        {
            Console.WriteLine($"  - {job.JobTitle}");
        }

        ApplySorting();
        currentPage = 1; // Reset to first page

        await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error applying filters: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SortJobs(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "relevance";
        ApplySorting();
        StateHasChanged();
    }

    private void ApplySorting()
    {
        filteredJobs = sortBy switch
        {
            "date" => filteredJobs.OrderByDescending(j => j.PostedDate).ToList(),
            "salary_high" => filteredJobs.OrderByDescending(j => j.MaximumSalary).ToList(),
            "salary_low" => filteredJobs.OrderBy(j => j.MinimumSalary).ToList(),
            "company" => filteredJobs.Where(j => j.Employer != null)
                .OrderBy(j => j.Employer.Name).ToList(),
            _ => filteredJobs.OrderByDescending(j => j.IsFeatured)
                .ThenByDescending(j => j.PostedDate).ToList()
        };
        StateHasChanged();
    }

    private void ToggleFilters()
    {
        showAdvancedFilters = !showAdvancedFilters;
    }

    private void CloseAdvancedFilters()
    {
        showAdvancedFilters = false;
    }

    private async Task ClearFilters()
    {
        currentSearch = null;
        currentFilters = null;
        filteredJobs = jobs.ToList();
        ApplySorting();
        currentPage = 1;
        await InvokeAsync(StateHasChanged);
    }

        private async Task ClearSearch()
    {
        currentSearch = null;
        await ApplyFilters();
    }

    private void SetViewMode(ViewMode mode)
    {
        viewMode = mode.ToString().ToLower();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task HandleBookmarkToggle(int jobId)
    {
        // Implement bookmark functionality when backend is ready
        await Task.CompletedTask;
    }

    private enum ViewMode
    {
        Grid,
        List
    }
}