@page "/dashboard/jobseeker/{id:int}"
@using JobBridge.Data
@using Microsoft.EntityFrameworkCore
@inject JobBridgeContext DbContext

<PageTitle>Job Seeker Dashboard - JobBridge</PageTitle>

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="hero-section">
            <div class="hero-content">
                <h1 class="hero-title">Welcome back, @(jobSeeker?.User.FirstName ?? "Job Seeker")!</h1>
                <p class="hero-subtitle">Find your next opportunity and track your progress</p>
                <div class="hero-buttons">
                    <a href="/job-listings" class="btn btn-primary">Browse Jobs</a>
                    <a href="/profile" class="btn btn-secondary">Update Profile</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Stats -->
    <div class="dashboard-stats">
        <div class="grid grid-cols-4">
            <StatisticsCard Icon="üìä" Value="@totalApplications.ToString()" Label="Total Applications" />
            <StatisticsCard Icon="üíæ" Value="@savedJobs.ToString()" Label="Saved Jobs" />
            <StatisticsCard Icon="üëÄ" Value="@profileViews.ToString()" Label="Profile Views" />
            <StatisticsCard Icon="üéØ" Value="@activeSearches.ToString()" Label="Active Searches" />
        </div>
    </div>

    <!-- Recent Applications -->
    <div class="dashboard-content">
        <div class="grid grid-cols-2">
            <div class="section-container">
                <h3>Recent Applications</h3>
                @if (recentApplications?.Any() == true)
                {
                    <div class="application-list">
                        @foreach (var application in recentApplications)
                        {
                            <div class="application-item">
                                <div class="application-info">
                                    <h4>@application.JobPost.JobTitle</h4>
                                    <p>@application.JobPost.Employer.Name</p>
                                    <span class="application-date">Applied @application.AppliedDate.ToString("MMM dd")</span>
                                </div>
                                <div class="application-status">
                                    <span class="status-badge status-@application.Status.ToString().ToLower()">@application.Status</span>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No applications yet. <a href="/job-listings">Start browsing jobs</a></p>
                    </div>
                }
            </div>

            <!-- Saved Jobs -->
            <div class="section-container">
                <h3>Saved Jobs</h3>
                @if (savedJobsList?.Any() == true)
                {
                    <div class="saved-jobs-list">
                        @foreach (var job in savedJobsList)
                        {
                            <div class="job-item">
                                <div class="job-info">
                                    <h4>@job.JobTitle</h4>
                                    <p>@job.Employer.Name</p>
                                    <span class="job-location">üìç @job.Location</span>
                                </div>
                                <div class="job-actions">
                                    <button class="btn btn-primary btn-sm" @onclick="() => ApplyToJob(job.Id)">Apply Now</button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No saved jobs yet. <a href="/job-listings">Browse jobs to save</a></p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private JobSeeker? jobSeeker;
    private int totalApplications = 0;
    private int savedJobs = 0;
    private int profileViews = 0; // Placeholder
    private int activeSearches = 0; // Placeholder

    private List<Application>? recentApplications;
    private List<JobPost>? savedJobsList;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        // Load JobSeeker with related data
        jobSeeker = await DbContext.JobSeekers
            .Include(js => js.User)
            .Include(js => js.Applications)
                .ThenInclude(a => a.JobPost)
                    .ThenInclude(jp => jp.Employer)
            .Include(js => js.Bookmarks)
                .ThenInclude(b => b.JobPost)
                    .ThenInclude(jp => jp.Employer)
            .FirstOrDefaultAsync(js => js.Id == Id);

        if (jobSeeker == null)
            return;

        // Stats
        totalApplications = jobSeeker.Applications.Count;
        savedJobs = jobSeeker.Bookmarks.Count;

        // Recent applications (last 5)
        recentApplications = jobSeeker.Applications
            .OrderByDescending(a => a.AppliedDate)
            .Take(5)
            .ToList();

        // Saved jobs (from bookmarks)
        savedJobsList = jobSeeker.Bookmarks
            .Select(b => b.JobPost)
            .OrderByDescending(jp => jp.PostedDate)
            .Take(5)
            .ToList();
    }

    private async Task ApplyToJob(int jobId)
    {
        if (jobSeeker != null)
        {
            bool alreadyApplied = await DbContext.Applications
                .AnyAsync(a => a.JobSeekerId == jobSeeker.Id && a.JobPostId == jobId);

            if (alreadyApplied)
            {
                applicationMessage = "You have already applied to this job.";
                return;
            }

            var newApplication = new Application
            {
                JobSeekerId = jobSeeker.Id,
                JobPostId = jobId,
                Status = ApplicationStatus.Pending,
                AppliedDate = DateTime.UtcNow
            };

            DbContext.Applications.Add(newApplication);
            await DbContext.SaveChangesAsync();
            await LoadDashboardData();

        }
    }


}
