@page "/profile"
@page "/employer/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using JobBridge.Data
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject JobBridgeContext DbContext
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>My Profile - JobBridge</PageTitle>

<div class="profile-container">
    <div class="section-container animate-fadeInUp">
        <h1 class="gradient-text">My Profile</h1>
        <p class="text-muted">Manage your personal information and preferences</p>
    </div>

    @if (user != null)
    {
        <div class="grid grid-cols-2" style="gap: var(--space-6);">
            <!-- Personal Information -->
            <div class="section-container">
                <h3 class="gradient-text">Personal Information</h3>
                <EditForm Model="@profileModel" OnValidSubmit="UpdateProfile">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group" style="margin-bottom: var(--space-4);">
                        <label class="form-label">First Name</label>
                        <InputText class="form-control" @bind-Value="profileModel.FirstName" />
                        <ValidationMessage For="@(() => profileModel.FirstName)" class="validation-message" />
                    </div>

                    <div class="form-group" style="margin-bottom: var(--space-4);">
                        <label class="form-label">Last Name</label>
                        <InputText class="form-control" @bind-Value="profileModel.LastName" />
                        <ValidationMessage For="@(() => profileModel.LastName)" class="validation-message" />
                    </div>

                    <div class="form-group" style="margin-bottom: var(--space-4);">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="profileModel.Email" disabled="true" />
                        <small class="text-muted">Email cannot be changed</small>
                    </div>

                    <div class="form-group" style="margin-bottom: var(--space-4);">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="profileModel.Phone" />
                        <ValidationMessage For="@(() => profileModel.Phone)" class="validation-message" />
                    </div>

                    <div class="form-group" style="margin-bottom: var(--space-4);">
                        <label class="form-label">Role</label>
                        <input class="form-control" value="@user.Role" disabled />
                        <small class="text-muted">Role cannot be changed</small>
                    </div>

                    <button type="submit" class="btn btn-gradient" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </button>

                    @if (saveSuccess)
                    {
                        <div class="alert alert-success" style="margin-top: var(--space-3);">
                            Profile updated successfully!
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" style="margin-top: var(--space-3);">
                            @errorMessage
                        </div>
                    }
                </EditForm>
            </div>

            <!-- Additional Information Based on Role -->
            <div class="section-container">
                @if (user.Role == "JobSeeker" && jobSeeker != null)
                {
                    <h3 class="gradient-text">Job Seeker Information</h3>
                    <EditForm Model="@jobSeekerModel" OnValidSubmit="UpdateJobSeekerInfo">
                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Resume URL</label>
                            <InputText class="form-control" @bind-Value="jobSeekerModel.ResumeUrl" 
                                placeholder="https://example.com/your-resume.pdf" />
                        </div>

                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Skills</label>
                            <textarea class="form-control" @bind="jobSeekerModel.Skills" 
                                rows="3" placeholder="Enter your skills separated by commas"></textarea>
                        </div>

                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Bio</label>
                            <textarea class="form-control" @bind="jobSeekerModel.Bio" 
                                rows="4" placeholder="Tell us about yourself"></textarea>
                        </div>

                        <button type="submit" class="btn btn-secondary">Update Job Seeker Info</button>
                    </EditForm>
                }
                else if (user.Role == "Employer" && employer != null)
                {
                    <h3 class="gradient-text">Company Information</h3>
                    <EditForm Model="@employerModel" OnValidSubmit="UpdateEmployerInfo">
                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Company Name</label>
                            <InputText class="form-control" @bind-Value="employerModel.CompanyName" />
                        </div>

                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Location</label>
                            <InputText class="form-control" @bind-Value="employerModel.Location" />
                        </div>

                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Industry</label>
                            <InputText class="form-control" @bind-Value="employerModel.Industry" />
                        </div>

                        <div class="form-group" style="margin-bottom: var(--space-4);">
                            <label class="form-label">Number of Employees</label>
                            <InputNumber class="form-control" @bind-Value="employerModel.NumberOfEmployees" />
                        </div>

                        <button type="submit" class="btn btn-secondary">Update Company Info</button>
                    </EditForm>
                }
                else
                {
                    <h3 class="gradient-text">Account Statistics</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <p class="text-muted">Member Since</p>
                            <h4>@user.CreatedAt.ToString("MMM dd, yyyy")</h4>
                        </div>
                        <div class="stat-item">
                            <p class="text-muted">Last Updated</p>
                            <h4>@user.UpdatedAt.ToString("MMM dd, yyyy")</h4>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Change Password Section -->
        <div class="section-container" style="margin-top: var(--space-6);">
            <h3 class="gradient-text">Change Password</h3>
            <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <div class="grid grid-cols-3" style="gap: var(--space-4);">
                    <div class="form-group">
                        <label class="form-label">Current Password</label>
                        <InputText type="password" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
                        <ValidationMessage For="@(() => passwordModel.CurrentPassword)" class="validation-message" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">New Password</label>
                        <InputText type="password" class="form-control" @bind-Value="passwordModel.NewPassword" />
                        <ValidationMessage For="@(() => passwordModel.NewPassword)" class="validation-message" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Confirm New Password</label>
                        <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" class="validation-message" />
                    </div>
                </div>
                <button type="submit" class="btn btn-gradient" style="margin-top: var(--space-3);">Change Password</button>
            </EditForm>
        </div>
    }
    else
    {
        <div class="section-container">
            <p>Loading profile...</p>
        </div>
    }
</div>

<style>
    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--space-6);
    }

    .form-group {
        margin-bottom: var(--space-4);
    }

    .form-label {
        display: block;
        margin-bottom: var(--space-2);
        font-weight: var(--font-medium);
        color: var(--gray-700);
    }

    .alert {
        padding: var(--space-3);
        border-radius: var(--radius-lg);
        margin-top: var(--space-3);
    }

    .alert-success {
        background: var(--success-50);
        color: var(--success-700);
        border: 1px solid var(--success-500);
    }

    .alert-danger {
        background: var(--error-50);
        color: var(--error-700);
        border: 1px solid var(--error-500);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--space-4);
        margin-top: var(--space-4);
    }

    .stat-item {
        padding: var(--space-4);
        background: var(--gray-50);
        border-radius: var(--radius-lg);
    }
</style>

@code {
    private User? user;
    private JobSeeker? jobSeeker;
    private Employers? employer;
    private ProfileModel profileModel = new();
    private JobSeekerModel jobSeekerModel = new();
    private EmployerModel employerModel = new();
    private PasswordModel passwordModel = new();
    private bool isSaving = false;
    private bool saveSuccess = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(userName))
        {
            user = await UserManager.FindByNameAsync(userName);
            if (user != null)
            {
                profileModel = new ProfileModel
                {
                    FirstName = user.FirstName,
                    LastName = user.LastName ?? "",
                    Email = user.Email,
                    Phone = user.Phone ?? ""
                };

                if (user.Role == "JobSeeker")
                {
                    jobSeeker = await DbContext.JobSeekers.FirstOrDefaultAsync(js => js.UserId == user.Id);
                    if (jobSeeker != null)
                    {
                        jobSeekerModel = new JobSeekerModel
                        {
                            ResumeUrl = jobSeeker.ResumeUrl ?? "",
                            Skills = "", // Add skills field to JobSeeker model if needed
                            Bio = "" // Add bio field to JobSeeker model if needed
                        };
                    }
                }
                else if (user.Role == "Employer")
                {
                    employer = await DbContext.Employers.FirstOrDefaultAsync(e => e.UserId == user.Id);
                    if (employer != null)
                    {
                        employerModel = new EmployerModel
                        {
                            CompanyName = employer.Name ?? "",
                            Location = employer.Location ?? "",
                            Industry = employer.Industry ?? "",
                            NumberOfEmployees = employer.NumberOfEmployees
                        };
                    }
                }
            }
        }
    }

    private async Task UpdateProfile()
    {
        isSaving = true;
        errorMessage = null;
        saveSuccess = false;

        try
        {
            if (user != null)
            {
                user.FirstName = profileModel.FirstName;
                user.LastName = profileModel.LastName;
                user.Phone = profileModel.Phone;
                user.UpdatedAt = DateTime.UtcNow;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    saveSuccess = true;
                }
                else
                {
                    errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task UpdateJobSeekerInfo()
    {
        if (jobSeeker != null)
        {
            jobSeeker.ResumeUrl = jobSeekerModel.ResumeUrl;
            DbContext.JobSeekers.Update(jobSeeker);
            await DbContext.SaveChangesAsync();
            saveSuccess = true;
        }
    }

    private async Task UpdateEmployerInfo()
    {
        if (employer != null)
        {
            employer.Name = employerModel.CompanyName;
            employer.Location = employerModel.Location;
            employer.Industry = employerModel.Industry;
            employer.NumberOfEmployees = employerModel.NumberOfEmployees;
            employer.UpdatedAt = DateTime.UtcNow;
            
            DbContext.Employers.Update(employer);
            await DbContext.SaveChangesAsync();
            saveSuccess = true;
        }
    }

    private async Task ChangePassword()
    {
        if (user != null)
        {
            var result = await UserManager.ChangePasswordAsync(user, passwordModel.CurrentPassword, passwordModel.NewPassword);
            if (result.Succeeded)
            {
                saveSuccess = true;
                passwordModel = new PasswordModel();
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
    }

    private class ProfileModel
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
    }

    private class JobSeekerModel
    {
        public string ResumeUrl { get; set; } = "";
        public string Skills { get; set; } = "";
        public string Bio { get; set; } = "";
    }

    private class EmployerModel
    {
        public string CompanyName { get; set; } = "";
        public string Location { get; set; } = "";
        public string Industry { get; set; } = "";
        public int NumberOfEmployees { get; set; }
    }

    private class PasswordModel
    {
        public string CurrentPassword { get; set; } = "";
        public string NewPassword { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}