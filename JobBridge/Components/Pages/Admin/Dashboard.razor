@page "/dashboard/admin"
@attribute [Authorize(Roles = "Admin")]
@using JobBridge.Data
@using JobBridge.Components.Common
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject JobBridgeContext DbContext
@inject NavigationManager Navigation

<PageTitle>Admin Dashboard - JobBridge</PageTitle>

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="hero-section">
            <div class="hero-content">
                <h1 class="hero-title" style="background: linear-gradient(90deg, #0ea5e9, #d946ef) !important; -webkit-background-clip: text !important; -webkit-text-fill-color: transparent !important; background-clip: text !important; color: transparent !important;">Admin Dashboard</h1>
                <p class="hero-subtitle">Platform Overview and Management</p>
                <div class="hero-buttons">
                    <a href="/admin/users" class="btn btn-primary">Manage Users</a>
                    <a href="/admin/jobs" class="btn btn-secondary">Moderate Jobs</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Platform Statistics -->
    <div class="dashboard-stats">
        <div class="grid grid-cols-4">
            <StatisticsCard Icon="üë•" Value="@totalUsers.ToString()" Label="Total Users" />
            <StatisticsCard Icon="üíº" Value="@totalJobs.ToString()" Label="Active Jobs" />
            <StatisticsCard Icon="üìä" Value="@totalApplications.ToString()" Label="Applications Today" />
            <StatisticsCard Icon="üè¢" Value="@totalCompanies.ToString()" Label="Companies" />
        </div>
    </div>

    <!-- Admin Management Sections -->
    <div class="dashboard-content">
        <div class="grid grid-cols-2">
            <!-- Recent User Registrations -->
            <div class="section-container">
                <div class="section-header">
                    <h3>Recent User Registrations</h3>
                    <a href="/admin/users" class="btn btn-sm btn-secondary">View All Users</a>
                </div>
                @if (recentUsers?.Any() == true)
                {
                    <div class="users-list">
                        @foreach (var user in recentUsers.Take(5))
                        {
                            <div class="user-item">
                                <div class="user-info">
                                    <h4>@user.Name</h4>
                                    <p>@user.Email ‚Ä¢ @user.Role</p>
                                    <span class="user-date">Registered @user.RegisteredDate.ToString("MMM dd")</span>
                                </div>
                                <div class="user-status">
                                    <span class="status-badge status-@(user.IsActive ? "active" : "inactive")">
                                        @(user.IsActive ? "Active" : "Inactive")
                                    </span>
                                </div>
                                <div class="user-actions">
                                    <button class="btn btn-sm btn-primary" @onclick="() => ViewUser(user.Id)">View</button>
                                    <button class="btn btn-sm @(user.IsActive ? "btn-warning" : "btn-success")" 
                                            @onclick="() => ToggleUserStatus(user.Id)">
                                        @(user.IsActive ? "Suspend" : "Activate")
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No recent user registrations.</p>
                    </div>
                }
            </div>

            <!-- Pending Job Approvals -->
            <div class="section-container">
                <div class="section-header">
                    <h3>Recent Job Posts</h3>
                    <a href="/admin/jobs" class="btn btn-sm btn-secondary">View All Jobs</a>
                </div>
                @if (pendingJobs?.Any() == true)
                {
                    <div class="jobs-list">
                        @foreach (var job in pendingJobs.Take(5))
                        {
                            <div class="job-item">
                                <div class="job-info">
                                    <h4>@job.Title</h4>
                                    <p>@job.CompanyName ‚Ä¢ @job.Location</p>
                                    <span class="job-date">Posted @job.PostedDate.ToString("MMM dd")</span>
                                </div>
                                <div class="job-actions">
                                    <button class="btn btn-sm btn-success" @onclick="() => ApproveJob(job.Id)">Approve</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RejectJob(job.Id)">Reject</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="() => ViewJob(job.Id)">Review</button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No recent job posts.</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Platform Analytics -->
    <div class="analytics-section">
        <div class="section-container">
            <h3>Platform Analytics</h3>
            <div class="analytics-grid">
                <!-- User Growth -->
                <div class="analytics-card">
                    <h4>User Growth</h4>
                    <div class="growth-stats">
                        <div class="growth-item">
                            <span class="growth-label">This Week</span>
                            <span class="growth-value positive">+@weeklyNewUsers</span>
                        </div>
                        <div class="growth-item">
                            <span class="growth-label">This Month</span>
                            <span class="growth-value positive">+@monthlyNewUsers</span>
                        </div>
                        <div class="growth-item">
                            <span class="growth-label">Growth Rate</span>
                            <span class="growth-value positive">@userGrowthRate.ToString("P1")</span>
                        </div>
                    </div>
                </div>

                <!-- Job Statistics -->
                <div class="analytics-card">
                    <h4>Job Statistics</h4>
                    <div class="job-breakdown">
                        <div class="breakdown-item">
                            <span class="breakdown-label">Active Jobs</span>
                            <span class="breakdown-value">@activeJobs</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">Expired Jobs</span>
                            <span class="breakdown-value">@expiredJobs</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">Avg. Applications</span>
                            <span class="breakdown-value">@averageApplicationsPerJob.ToString("F1")</span>
                        </div>
                    </div>
                </div>

                <!-- Platform Health -->
                <div class="analytics-card">
                    <h4>Platform Health</h4>
                    <div class="health-metrics">
                        <div class="health-item">
                            <span class="health-label">System Status</span>
                            <span class="health-status status-active">Online</span>
                        </div>
                        <div class="health-item">
                            <span class="health-label">Database</span>
                            <span class="health-status status-active">Healthy</span>
                        </div>
                        <div class="health-item">
                            <span class="health-label">Response Time</span>
                            <span class="health-value">@responseTime ms</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Quick Actions -->
    <div class="admin-actions">
        <div class="section-container">
            <h3>Quick Actions</h3>
            <div class="action-grid">
                <a href="/admin/users" class="action-card">
                    <div class="action-icon" aria-hidden="true">üë•</div>
                    <h4>User Management</h4>
                    <p>View all users and job seekers</p>
                </a>
                <a href="/admin/jobs" class="action-card">
                    <div class="action-icon" aria-hidden="true">üíº</div>
                    <h4>Job Management</h4>
                    <p>Review and moderate job postings</p>
                </a>
                <a href="/admin/reports" class="action-card">
                    <div class="action-icon" aria-hidden="true">üìä</div>
                    <h4>Reports</h4>
                    <p>View platform analytics and reports</p>
                </a>
                <a href="/admin/settings" class="action-card">
                    <div class="action-icon" aria-hidden="true">‚öôÔ∏è</div>
                    <h4>Settings</h4>
                    <p>Configure platform settings</p>
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalUsers = 0;
    private int totalJobs = 0;
    private int totalApplications = 0;
    private int totalCompanies = 0;
    private int weeklyNewUsers = 0;
    private int monthlyNewUsers = 0;
    private double userGrowthRate = 0.0;
    private int activeJobs = 0;
    private int expiredJobs = 0;
    private double averageApplicationsPerJob = 0.0;
    private int responseTime = 45;
    
    private List<UserSummary>? recentUsers;
    private List<JobSummary>? pendingJobs;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load basic statistics
            totalUsers = await DbContext.Users.CountAsync();
            totalJobs = await DbContext.JobPosts.CountAsync(j => j.IsActive);
            totalApplications = await DbContext.Applications
                .CountAsync(a => a.AppliedDate.Date == DateTime.Today);
            totalCompanies = await DbContext.Employers.CountAsync();

            // Load growth statistics
            var weekAgo = DateTime.UtcNow.AddDays(-7);
            var monthAgo = DateTime.UtcNow.AddMonths(-1);
            
            weeklyNewUsers = await DbContext.Users
                .CountAsync(u => u.CreatedAt >= weekAgo);
            monthlyNewUsers = await DbContext.Users
                .CountAsync(u => u.CreatedAt >= monthAgo);

            var totalUsersLastMonth = await DbContext.Users
                .CountAsync(u => u.CreatedAt < monthAgo);
            userGrowthRate = totalUsersLastMonth > 0 ? 
                (double)monthlyNewUsers / totalUsersLastMonth : 0;

            // Load job statistics
            activeJobs = await DbContext.JobPosts.CountAsync(j => j.IsActive);
            expiredJobs = await DbContext.JobPosts
                .CountAsync(j => j.ApplicationDeadline < DateTime.UtcNow);
            
            var totalApplicationsCount = await DbContext.Applications.CountAsync();
            averageApplicationsPerJob = activeJobs > 0 ? 
                (double)totalApplicationsCount / activeJobs : 0;

            // Load recent users
            recentUsers = await DbContext.Users
                .OrderByDescending(u => u.CreatedAt)
                .Take(5)
                .Select(u => new UserSummary
                {
                    Id = u.Id,
                    Name = $"{u.FirstName} {u.LastName}",
                    Email = u.Email ?? "",
                    Role = u.Role ?? "Unknown",
                    RegisteredDate = u.CreatedAt,
                    IsActive = true
                })
                .ToListAsync();

            // Load recent jobs
            var jobsData = await DbContext.JobPosts
                .Include(j => j.Employer)
                .Where(j => j.IsActive)
                .OrderByDescending(j => j.PostedDate)
                .Take(5)
                .ToListAsync();
                
            pendingJobs = jobsData.Select(j => new JobSummary
            {
                Id = j.Id,
                Title = j.JobTitle,
                CompanyName = j.Employer?.Name ?? "Unknown",
                Location = j.Location,
                PostedDate = j.PostedDate
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private async Task ViewUser(string userId)
    {
        // Find the user and navigate to appropriate profile based on role
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            if (user.Role == "JobSeeker")
            {
                Navigation.NavigateTo($"/profile/jobseeker/{userId}");
            }
            else if (user.Role == "Employer")
            {
                Navigation.NavigateTo($"/profile/employer/{userId}");
            }
            else
            {
                // For Admin or other roles, go to user management page
                Navigation.NavigateTo($"/admin/users");
            }
        }
    }

    private async Task ToggleUserStatus(string userId)
    {
        var user = recentUsers?.FirstOrDefault(u => u.Id == userId);
        if (user != null)
        {
            user.IsActive = !user.IsActive;
            StateHasChanged();
        }
    }

    private async Task ApproveJob(int jobId)
    {
        var job = pendingJobs?.FirstOrDefault(j => j.Id == jobId);
        if (job != null)
        {
            pendingJobs?.Remove(job);
            StateHasChanged();
        }
    }

    private async Task RejectJob(int jobId)
    {
        try
        {
            var job = await DbContext.JobPosts.FindAsync(jobId);
            if (job != null)
            {
                job.IsActive = false;
                job.UpdatedAt = DateTime.UtcNow;
                await DbContext.SaveChangesAsync();
                
                // Remove from UI list
                var jobSummary = pendingJobs?.FirstOrDefault(j => j.Id == jobId);
                if (jobSummary != null)
                {
                    pendingJobs?.Remove(jobSummary);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rejecting job: {ex.Message}");
        }
    }

    private async Task ViewJob(int jobId)
    {
        Navigation.NavigateTo($"/job/{jobId}");
        await Task.CompletedTask;
    }

    public class UserSummary
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public DateTime RegisteredDate { get; set; }
        public bool IsActive { get; set; }
    }

    public class JobSummary
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string CompanyName { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public DateTime PostedDate { get; set; }
    }
}