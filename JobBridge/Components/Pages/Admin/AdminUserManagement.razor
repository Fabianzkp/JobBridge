@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@using JobBridge.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject JobBridgeContext DbContext
@inject UserManager<User> UserManager
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>User Management - Admin</PageTitle>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1 class="hero-title">User Management</h1>
        <p class="hero-subtitle">Manage platform users and accounts</p>
    </div>

    <div class="user-management-content">
        @if (isLoading)
        {
            <div class="loading-message">Loading users...</div>
        }
        else if (users?.Any() == true)
        {
            <div class="users-grid">
                @foreach (var user in users)
                {
                    <div class="admin-user-card">
                        <div class="user-header">
                            <h3>@user.FirstName @user.LastName</h3>
                            <span class="user-role @user.Role.ToLower()">@user.Role</span>
                        </div>
                        <div class="user-details">
                            <p><strong>Email:</strong> @user.Email</p>
                            <p><strong>Phone:</strong> @(!string.IsNullOrEmpty(user.Phone) ? user.Phone : "Not provided")</p>
                            <p><strong>Joined:</strong> @user.CreatedAt.ToString("MMM dd, yyyy")</p>
                            <p><strong>Status:</strong> @(user.EmailConfirmed ? "Verified" : "Unverified")</p>
                        </div>
                        <div class="user-actions">
                            <button class="btn btn-secondary btn-sm" @onclick="async () => await ViewUser(user.Id)">View</button>
                            @if (user.EmailConfirmed)
                            {
                                <button class="btn btn-warning btn-sm" @onclick="() => SuspendUser(user.Id)" disabled="@isProcessing">
                                    @(isProcessing ? "Processing..." : "Suspend")
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success btn-sm" @onclick="() => ActivateUser(user.Id)" disabled="@isProcessing">
                                    @(isProcessing ? "Processing..." : "Activate")
                                </button>
                            }
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(user.Id)" disabled="@isProcessing">
                                Delete
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <p>No users found.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<User>? users;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            users = await DbContext.Users
                .OrderByDescending(u => u.CreatedAt)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ViewUser(string userId)
    {
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            if (user.Role == "JobSeeker")
            {
                Navigation.NavigateTo($"/profile/jobseeker/{userId}");
            }
            else if (user.Role == "Employer")
            {
                Navigation.NavigateTo($"/profile/employer/{userId}");
            }
            else
            {
                Navigation.NavigateTo($"/profile");
            }
        }
    }

    private async Task ActivateUser(string userId)
    {
        try
        {
            isProcessing = true;
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                user.EmailConfirmed = true;
                user.UpdatedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
                statusMessage = "User activated successfully!";
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error activating user: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SuspendUser(string userId)
    {
        try
        {
            isProcessing = true;
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                user.EmailConfirmed = false;
                user.UpdatedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
                statusMessage = "User suspended successfully!";
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error suspending user: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ConfirmDelete(string userId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This action cannot be undone."))
        {
            await DeleteUser(userId);
        }
    }

    private async Task DeleteUser(string userId)
    {
        try
        {
            isProcessing = true;
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                // Delete related records first
                if (user.Role == "JobSeeker")
                {
                    var jobSeeker = await DbContext.JobSeekers.FirstOrDefaultAsync(js => js.UserId == userId);
                    if (jobSeeker != null)
                    {
                        // Delete applications
                        var applications = await DbContext.Applications.Where(a => a.JobSeekerId == jobSeeker.Id).ToListAsync();
                        DbContext.Applications.RemoveRange(applications);
                        
                        // Delete profile views
                        var profileViews = await DbContext.ProfileViews.Where(pv => pv.JobSeekerId == jobSeeker.Id).ToListAsync();
                        DbContext.ProfileViews.RemoveRange(profileViews);
                        
                        // Delete job seeker record
                        DbContext.JobSeekers.Remove(jobSeeker);
                    }
                }
                else if (user.Role == "Employer")
                {
                    var employer = await DbContext.Employers.FirstOrDefaultAsync(e => e.UserId == userId);
                    if (employer != null)
                    {
                        // Delete job posts and related data
                        var jobPosts = await DbContext.JobPosts.Where(jp => jp.EmployerId == employer.Id).ToListAsync();
                        foreach (var jobPost in jobPosts)
                        {
                            var applications = await DbContext.Applications.Where(a => a.JobPostId == jobPost.Id).ToListAsync();
                            DbContext.Applications.RemoveRange(applications);
                        }
                        DbContext.JobPosts.RemoveRange(jobPosts);
                        
                        // Delete profile views
                        var profileViews = await DbContext.ProfileViews.Where(pv => pv.EmployerId == employer.Id).ToListAsync();
                        DbContext.ProfileViews.RemoveRange(profileViews);
                        
                        // Delete employer record
                        DbContext.Employers.Remove(employer);
                    }
                }
                
                await DbContext.SaveChangesAsync();
                await UserManager.DeleteAsync(user);
                statusMessage = "User deleted successfully!";
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting user: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}